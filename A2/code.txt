
def rlr_validate(X, y, lambdas, cvf_outer=10, cvf_inner=10):
    CV_outer = model_selection.KFold(cvf_outer, shuffle=True)
    M = X.shape[1]
    w = np.empty((M, cvf_outer, len(lambdas)))
    train_error = np.empty((cvf_outer, len(lambdas)))
    test_error = np.empty((cvf_outer, len(lambdas)))
    
    for f_outer, (train_index_outer, test_index_outer) in enumerate(CV_outer.split(X, y)):
        X_train_outer, X_test_outer = X[train_index_outer], X[test_index_outer]
        y_train_outer, _ = y[train_index_outer], y[test_index_outer]
        
        CV_inner = model_selection.KFold(cvf_inner, shuffle=True)
        
        for f_inner, (train_index_inner, test_index_inner) in enumerate(CV_inner.split(X_train_outer, y_train_outer)):
            X_train_inner, X_val = X_train_outer[train_index_inner], X_train_outer[test_index_inner]
            y_train_inner, y_val = y_train_outer[train_index_inner], y_train_outer[test_index_inner]
            
            mu = np.mean(X_train_inner[:, 1:], axis=0)
            sigma = np.std(X_train_inner[:, 1:], axis=0)

            X_train_inner[:, 1:] = (X_train_inner[:, 1:] - mu) / sigma
            X_val[:, 1:] = (X_val[:, 1:] - mu) / sigma
            X_test_outer[:, 1:] = (X_test_outer[:, 1:] - mu) / sigma
            Xty = X_train_inner.T @ y_train_inner
            XtX = X_train_inner.T @ X_train_inner
            for l in range(len(lambdas)):
                lambdaI = lambdas[l] * np.eye(M)
                lambdaI[0, 0] = 0
                w[:, f_inner, l] = np.linalg.solve(XtX + lambdaI, Xty).squeeze()
                train_error[f_inner, l] = np.power(y_train_inner - X_train_inner @ w[:, f_inner, l].T, 2).mean(axis=0)
                test_error[f_inner, l] = np.power(y_val - X_val @ w[:, f_inner, l].T, 2).mean(axis=0)
    
    opt_val_err = np.min(np.mean(test_error, axis=0))
    opt_lambda = lambdas[np.argmin(np.mean(test_error, axis=0))]
    train_err_vs_lambda = np.mean(train_error, axis=0)
    test_err_vs_lambda = np.mean(test_error, axis=0)
    mean_w_vs_lambda = np.squeeze(np.mean(w, axis=1))

    return (
        opt_val_err,
        opt_lambda,
        mean_w_vs_lambda,
        train_err_vs_lambda,
        test_err_vs_lambda,
    )